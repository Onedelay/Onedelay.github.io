<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[Android] 안드로이드 개발 레벨업 교과서 정리 #2 커스텀뷰</title>
      <link href="/2018/11/07/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A0%88%EB%B2%A8%EC%97%85-2/"/>
      <url>/2018/11/07/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A0%88%EB%B2%A8%EC%97%85-2/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><em>출처 : 안드로이드 개발 레벨업 교과서 41~50p</em></p><p>몰랐던 부분 정리하는 포스트!</p><p><br></p><h3 id="커스텀-뷰-만들기"><a href="#커스텀-뷰-만들기" class="headerlink" title="커스텀 뷰 만들기"></a>커스텀 뷰 만들기</h3><h4 id="1-뷰를-이해하자"><a href="#1-뷰를-이해하자" class="headerlink" title="1. 뷰를 이해하자"></a>1. 뷰를 이해하자</h4><ul><li>뷰란 UI를 구성하는 바탕이 되는 컴포넌트로서 네모난 그리기 영역을 가진다</li><li>패딩으로 지정된 간격은 배경색으로 칠해지고, 마진으로 지정된 간격은 공백이 된다. 패딩은 뷰 크기에 포함되지만, 마진은 포함되지 않는다.</li></ul><p><br></p><h3 id="2-커스텀-뷰-만들기"><a href="#2-커스텀-뷰-만들기" class="headerlink" title="2. 커스텀 뷰 만들기"></a>2. 커스텀 뷰 만들기</h3><ul><li>기존 뷰를 조합한 커스텀뷰 만들기는 아래 4단계로 진행된다.<ol><li>커스텀뷰의 레이아웃을 결정한다.</li><li>레이아웃 XML로 설정할 수 있는 항목을 attrs.xml에 기재한다.</li><li>커스텀 뷰 클래스를 만든다.</li><li>메인 앱의 레이아웃에 삽입해서 확인한다.</li></ol></li></ul><p><br></p><h4 id="①-커스텀뷰의-레이아웃을-결정한다"><a href="#①-커스텀뷰의-레이아웃을-결정한다" class="headerlink" title="① 커스텀뷰의 레이아웃을 결정한다."></a>① 커스텀뷰의 레이아웃을 결정한다.</h4><ul><li>가장 먼저 xml 로 레이아웃을 만든다.</li></ul><h5 id="five-airplane-indicator-xml"><a href="#five-airplane-indicator-xml" class="headerlink" title="five_airplane_indicator.xml"></a>five_airplane_indicator.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/airplane1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/black_plane_yellow"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/airplane2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/black_plane_base"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/airplane3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/black_plane_base"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/airplane4"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/black_plane_base"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/airplane5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/black_plane_base"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>주의할 점은 루트 태그를 merge로 해야한다는 것이다. 이유는 커스텀 뷰가 LinearLayout을 상속한 클래스이므로 LinearLayout의 불필요한 중첩을 피하기 위함이다.</li></ul><p><br></p><h4 id="②-레이아웃-xml로-설정할-수-있는-항목을-attrs-xml에-기재한다"><a href="#②-레이아웃-xml로-설정할-수-있는-항목을-attrs-xml에-기재한다" class="headerlink" title="② 레이아웃 xml로 설정할 수 있는 항목을 attrs.xml에 기재한다."></a>② 레이아웃 xml로 설정할 수 있는 항목을 attrs.xml에 기재한다.</h4><ul><li>커스텀뷰의 xml로 속성을 변경할 수 있도록 준비한다. xml 로 몇번째 비행기가 선택되었는지 설정할 수 있도록 selected 속성을 추가했다.</li></ul><p><strong>values/attrs.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyCustomView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"selected"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="③-커스텀-뷰-클래스를-만든다"><a href="#③-커스텀-뷰-클래스를-만든다" class="headerlink" title="③ 커스텀 뷰 클래스를 만든다."></a>③ 커스텀 뷰 클래스를 만든다.</h4><ul><li><p>커스텀 뷰를 만들 때는 View를 상속할 필요가 있다. 이번 예제에서는 LinearLayout을 사용한다.</p></li><li><p>염두에 둘 것은 3가지</p><p>레이아웃 xml</p><p>스타일 반영</p><p>외부 클래스</p><p>로서, 예를 들어 액티비티로 조작할 수 있게 메서드를 구현한다.</p></li></ul><p><strong>MyCustomView.kt</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.onedelay.myapplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.<span class="keyword">annotation</span>.TargetApi</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomView</span> : <span class="type">LinearLayout &#123;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mAirplane1: ImageView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mAirplane2: ImageView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mAirplane3: ImageView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mAirplane4: ImageView</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mAirplane5: ImageView</span><br><span class="line">    <span class="keyword">var</span> mSelected = <span class="number">0</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context?) : <span class="keyword">super</span>(context) &#123;</span><br><span class="line">        initializeViews(context, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context?, attrs: AttributeSet?) : <span class="keyword">super</span>(context, attrs) &#123;</span><br><span class="line">        initializeViews(context, attrs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context?, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr) &#123;</span><br><span class="line">        initializeViews(context, attrs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context?, attrs: AttributeSet?, defStyleAttr: <span class="built_in">Int</span>, defStyleRes: <span class="built_in">Int</span>) : <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes) &#123;</span><br><span class="line">        initializeViews(context, attrs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 레이아웃 초기화</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initializeViews</span><span class="params">(context: <span class="type">Context</span>?, attrs: <span class="type">AttributeSet</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> inflater = context?.getSystemService(Context.LAYOUT_INFLATER_SERVICE) <span class="keyword">as</span> LayoutInflater</span><br><span class="line">        <span class="comment">// 1. 레이아웃 전개</span></span><br><span class="line">        inflater.inflate(R.layout.five_airplane_indicator, <span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 2. attrs.xml 에 정의한 스타일을 가져온다</span></span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> a: TypedArray = context.obtainStyledAttributes(attrs, R.styleable.MyCustomView)</span><br><span class="line">            mSelected = a.getInteger(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            a.recycle() <span class="comment">// 이용이 끝났으면 recycle()을 호출한다</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * inflate 가 완료되는 시점에서 콜백된다</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFinishInflate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onFinishInflate()</span><br><span class="line">        mAirplane1 = findViewById(R.id.airplane1)</span><br><span class="line">        mAirplane2 = findViewById(R.id.airplane2)</span><br><span class="line">        mAirplane3 = findViewById(R.id.airplane3)</span><br><span class="line">        mAirplane4 = findViewById(R.id.airplane4)</span><br><span class="line">        mAirplane5 = findViewById(R.id.airplane5)</span><br><span class="line">        <span class="comment">// 처음에만 xml 의 지정을 반영하고자 2번째 인수인 force 를 true 로 한다</span></span><br><span class="line">        setSelected(mSelected, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setSelected</span><span class="params">(select: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        setSelected(select, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 지정된 번호로 선택한다(내부용)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> select 지정할 번호(0이 가장 왼쪽)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> force: 지정을 강제로 반영한다</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setSelected</span><span class="params">(select: <span class="type">Int</span>, force: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (force || mSelected != select)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">4</span> &lt; mSelected || mSelected &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        mSelected = select</span><br><span class="line">        <span class="keyword">when</span> (mSelected) &#123;</span><br><span class="line">            <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                mAirplane1.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane2.setImageResource(R.drawable.black_plane_yellow)</span><br><span class="line">                mAirplane3.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane4.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane5.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                mAirplane1.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane2.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane3.setImageResource(R.drawable.black_plane_yellow)</span><br><span class="line">                mAirplane4.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane5.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">3</span> -&gt; &#123;</span><br><span class="line">                mAirplane1.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane2.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane3.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane4.setImageResource(R.drawable.black_plane_yellow)</span><br><span class="line">                mAirplane5.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="number">4</span> -&gt; &#123;</span><br><span class="line">                mAirplane1.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane2.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane3.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane4.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane5.setImageResource(R.drawable.black_plane_yellow)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                mAirplane1.setImageResource(R.drawable.black_plane_yellow)</span><br><span class="line">                mAirplane2.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane3.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane4.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">                mAirplane5.setImageResource(R.drawable.black_plane_base)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="④-메인-앱의-레이아웃에-삽입해서-확인한다"><a href="#④-메인-앱의-레이아웃에-삽입해서-확인한다" class="headerlink" title="④ 메인 앱의 레이아웃에 삽입해서 확인한다."></a>④ 메인 앱의 레이아웃에 삽입해서 확인한다.</h4><ul><li>&lt;패키지명.클래스명&gt; 태그로 xml에 뷰를 추가한다.</li><li>이름공간(app)이 부여되어있는데, attrs.xml 에서 지정한 정의를 이용하기 위해 필요하다. app이라는 이름공간은 <code>xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</code>가 된다. 이 이름공간을 이용하면 자동으로 attrs.xml에서 정의한 내용을 연결할 수 있다.</li></ul><p><strong>activity_main.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"15dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.onedelay.myapplication.MyCustomView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/indicator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:selected</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/str_click"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>MainActivity.kt</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener &#123;</span><br><span class="line">            indicator.setSelected((indicator.mSelected + <span class="number">1</span>) % <span class="number">5</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>결과화면</p><p><img src="/images/커스텀뷰만들기_캡쳐화면.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Android] 안드로이드 개발 레벨업 교과서 정리 #1 액티비티</title>
      <link href="/2018/11/07/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A0%88%EB%B2%A8%EC%97%85-1/"/>
      <url>/2018/11/07/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A0%88%EB%B2%A8%EC%97%85-1/</url>
      
        <content type="html"><![CDATA[<p><br></p><p><em>출처 : 안드로이드 개발 레벨업 교과서 34~40p</em></p><p>몰랐던 부분 정리하는 포스트!</p><p><br></p><h3 id="액티비티를-이해하자"><a href="#액티비티를-이해하자" class="headerlink" title="# 액티비티를 이해하자"></a># 액티비티를 이해하자</h3><h4 id="1-액티비티란"><a href="#1-액티비티란" class="headerlink" title="1. 액티비티란?"></a>1. 액티비티란?</h4><ul><li>사용자가 어떤 활동을 할 때 실행되는 애플리케이션의 컴포넌트</li><li>액티비티에는 윈도우가 있고, 그 윈도우에 텍스트나 이미지를 표시해 사용자 조작에 반응할 수 있다.</li><li>UI가 없는 액티비티도 있지만 기본적으로 한 액티비티가 한 화면을 표시한다.</li></ul><p><br></p><h4 id="2-액티비티의-수명주기를-이해하자"><a href="#2-액티비티의-수명주기를-이해하자" class="headerlink" title="2. 액티비티의 수명주기를 이해하자"></a>2. 액티비티의 수명주기를 이해하자</h4><p>&lt;표 2-1&gt; 액티비티의 수명주기 종류</p><table><thead><tr><th>메서드명</th><th>시점</th><th>처리 예</th></tr></thead><tbody><tr><td>onCreate</td><td>생성 시</td><td>초기화 처리와 뷰 생성(setContentView 호출) 등</td></tr><tr><td>onStart</td><td>비표시 시</td><td>통신이나 센서 처리 시작</td></tr><tr><td>onRestart</td><td>표시 시(재시작만)</td><td>보통 아무것도 하지 않음</td></tr><tr><td>onResume</td><td>최전면 표시</td><td>필요한 애니메이션 실행 등의 화면 갱신 처리</td></tr><tr><td>onPause</td><td>일부 표시(일시정지 상태)</td><td>애니메이션 등 화면 갱신 처리를 정지 또는 일시정지할 때 필요 없는 리소스를 해제하거나 필요한 데이터 저장</td></tr><tr><td>onStop</td><td>비표시(정지) 상태</td><td>통신이나 센서 처리 정지</td></tr><tr><td>onDestroy</td><td>폐기 시</td><td>필요 없는 리소스를 해제. 액티비티 참조는 모두 정리</td></tr></tbody></table><ul><li>시스템 메모리가 모자랄 경우 시스템은 onStop, onDestroy를 콜백하지 않고 액티비티를 강제로 종료시켜 메모리를 확보할 때가 있다.<ul><li>이 경우 데이터를 영속적으로 보존하려면 액티비티가 일시정지 상태로 전환되는 <strong>onPause</strong>에서 이를 처리할 필요가 있다.</li><li>졸업작품 프로젝트를 진행할때, 프래그먼트로부터 받은 데이터를 액티비티 변수에 담고있었는데, 실제로 위 경우를 겪은 사례가 있다. (정보를 날렸다)</li></ul></li><li>예를 들어, onCreate에서 뷰를 만들면 onDestroy에서 해제한다. 뷰는 액티비티가 폐기된 다음, GC에 의해 자동으로 메모리가 해제된다.</li><li>onStart에서 위치 정보 취득을 시작했다면 onStop에서 (만약 정보 취득을 완료하지 않았다면) 취득을 정지하는 식</li><li>onDestroy에서 액티비티가 폐기되면 GC가 메모리 영역에서 해제한다. 단, 액티비티 인스턴스가 다른 클래스에서 참조되고 있을 때는 폐기된 후에도 메모리에 남아 결국 <strong>메모리 누수</strong>가 발생한다.</li></ul><p><br></p><h4 id="디바이스-설정의-갱신-탐지"><a href="#디바이스-설정의-갱신-탐지" class="headerlink" title="디바이스 설정의 갱신 탐지"></a>디바이스 설정의 갱신 탐지</h4><ul><li>액티비티는 디바이스 설정이 변경되면 기본적으로 시스템에서 현재 액티비티를 폐기하고 새로 생성한다.<ul><li>화면 방향 전환, 언어 설정 변경, USIM 교체에 따른 전화번호 변경 등</li></ul></li><li><p>액티비티를 재생성할 때는 현재 상태를 액티비티에 일시적으로 저장해서 이용할 수 있다. </p><ul><li>화면 방향 전환시에도 데이터를 유지시킬 수 있게 된다.</li><li>onSaveInstanceState, onRestoreInstance 의 파라미터 Bundle 객체로 저장, 불러오기가 가능하다.<ul><li>시스템의 임시 영역을 활용하고, 프로세스 간 통신(IPC)로 데이터를 주고받는다.</li><li>IPC는 서로의 자료형을 어떻게 주고받을지 정해 둘 필요가 있는데, 그 방법이 Parcelable 인터페이스로 정의돼 있다.</li></ul></li><li>저장할 수 있는 자료형은 primitive, List, Parcelable 객체이다.</li></ul></li><li><p>onSaveInstanceState, onRestoreInstance 메서드는 사용자가 백버튼으로 액티비티를 명시적으로 폐기한 경우에는 호출되지 않는다.</p></li><li>데이터를 저장하고 싶다면 <strong>onPause</strong> 시점에서 저장해 두면 된다.</li></ul><p><br></p><h3 id="3-액티비티의-백스택을-이해하자"><a href="#3-액티비티의-백스택을-이해하자" class="headerlink" title="3. 액티비티의 백스택을 이해하자"></a>3. 액티비티의 백스택을 이해하자</h3><ul><li><p>새로운 액티비티가 시작되면 실행중이던 액티비티는 백스택에 들어간다.</p></li><li><p>또한 시작된 액티비티는 태스크라는 그룹에 속한다. 이 항목은 안드로이드 OS 버전에 따라서도 미묘하게 동작이 달라 다 이해하기는 어려우므로, 아래 3가지만 기억하면 된다.</p><blockquote><ol><li>같은 앱에서 시작된 액티비티는 같은 백스택에 쌓인다</li><li>taskAffinity의 속성에 따라 소속되는 태스크가 달라진다.</li><li>launchMode에 따라 액티비티 생성의 여부, 새로운 태스크에 속하는 등 액티비티의 시작이 달라진다.</li></ol></blockquote></li></ul><p><br></p><h5 id="taskAffinity"><a href="#taskAffinity" class="headerlink" title="taskAffinity"></a>taskAffinity</h5><ul><li>태스크 친화성이라는 의미지만, 대체로 ‘태스크 이름’으로 바꿔 읽는 것이 이해하기 쉽다.</li><li>taskAffinity가 지정되지 않은 경우 자기 앱의 패키지 이름이 태스크 이름이 된다.</li><li>이를 설정하지 않으면 그 앱의 태스크이름은 모두 같아진다.<ul><li>태스크가 다르면, 백스택에 소속되는 그룹이 달라진다.</li></ul></li></ul><p><br></p><h5 id="launchMode"><a href="#launchMode" class="headerlink" title="launchMode"></a>launchMode</h5><table><thead><tr><th>launchMode</th><th>내용</th></tr></thead><tbody><tr><td>standard</td><td>매번 액티비티의 인스턴스를 새로 생성한다. (기본값)</td></tr><tr><td>singleTop</td><td>같은 액티비티가 최상위에서 실행 중이면 액티비티를 생성하지 않고, 그 대신 최상위 인스턴스의 onNewIntent()를 호출한다.</td></tr><tr><td>singleTask</td><td>1개의 태스크에 인스턴스가 존재한다. 이미 같은 액티비티가 실행중이면 액티비티를 생성하지 않는다. (브라우저 앱이나 게임 앱 등 여러 액티비티를 만들고 싶지 않을 때 사용한다.)</td></tr><tr><td>singleInstance</td><td>1개의 태스크에 1개의 인스턴스만 존재한다. 다른 액티비티를 태스크에 포함하지 않는다. 이미 같은 액티비티가 실행중이면 액티비티를 생성하지 않는다. (기본적으로 잘 사용하지 않는다.)</td></tr></tbody></table><ul><li>이 설정은 Manifest 에서 액티비티 속성으로 설정할 수 있고, <code>android:taskAffinity=&quot;:someting&quot;</code> 라고 쓰면 된다.<ul><li>기본값이 지정된 액티비티들과, 위와같이 설정한 액티비티의 소속 그룹이 다른 것을 adb 로 확인해볼 수 있다.</li><li>백스택 확인은 <code>adb shell dumpsys activity activities</code> 으로 하면 된다.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Concepts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(8)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-8/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-8/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Properties-and-Fields"><a href="#새차원의-코틀린-강좌-Properties-and-Fields" class="headerlink" title="새차원의 코틀린 강좌 - Properties and Fields"></a>새차원의 코틀린 강좌 - Properties and Fields</h2><p><br></p><h5 id="프로퍼티-선언"><a href="#프로퍼티-선언" class="headerlink" title="프로퍼티 선언"></a>프로퍼티 선언</h5><ul><li>코틀린 클래스는 프로퍼티를 가질 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">"Kotlin"</span> <span class="comment">// mutable</span></span><br><span class="line">    <span class="keyword">val</span> city: String = <span class="string">"Seoul"</span>  <span class="comment">// read-only</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>프로퍼티 사용은 자바의 필드를 사용하듯이 하면 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">copyAddress</span><span class="params">(address: <span class="type">Address</span>)</span></span>: Address &#123;    </span><br><span class="line">    <span class="keyword">val</span> result = Address()    </span><br><span class="line">    result.name = address.name + <span class="string">" copy"</span>    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="프로퍼티-문법"><a href="#프로퍼티-문법" class="headerlink" title="프로퍼티 문법"></a>프로퍼티 문법</h5><ul><li>전체 문법</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [=&lt;property_initializer&gt;]</span><br><span class="line">[&lt;getter&gt;]</span><br><span class="line">[&lt;setter&gt;]</span><br></pre></td></tr></table></figure><ul><li>옵션 (생략 가능)<ul><li>PropertyType : property_initiallizer에서 타입을 추론 가능한 경우 생략 가능</li><li>property_initializer</li><li>getter</li><li>setter</li></ul></li><li><p>객체지향 언어(JS, C#, 루비 등)는 언어레벨에서 프로퍼티를 지원한다. (내부적으로 은닉, 캡슐화) </p></li><li><p>var (mutable) 프로퍼티</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// default getter와 setter    </span></span><br><span class="line">    <span class="comment">// 타입은 Int    </span></span><br><span class="line">    <span class="keyword">var</span> initialized = <span class="number">1</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error    </span></span><br><span class="line">    <span class="comment">// default getter와 setter를 사용한 경우 명시적인 초기화 필요    </span></span><br><span class="line">    <span class="keyword">var</span> allByDefault: <span class="built_in">Int</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>val (read-only) 프로퍼티<ul><li>setter 가 없음</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// default getter와 setter    </span></span><br><span class="line">    <span class="comment">// 타입은 Int    </span></span><br><span class="line">    <span class="keyword">val</span> initialized = <span class="number">1</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// error    </span></span><br><span class="line">    <span class="comment">// default getter. 명시적인 초기화 필요    </span></span><br><span class="line">    <span class="keyword">val</span> allByDefault: <span class="built_in">Int</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Custom-accessors-getter-setter"><a href="#Custom-accessors-getter-setter" class="headerlink" title="Custom accessors (getter, setter)"></a>Custom accessors (getter, setter)</h5><ul><li><p>custom accessor는 프로퍼티 선언 내부에, 일반 함수처럼 선언할 수 있음</p><ul><li>getter</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isEmpty: <span class="built_in">Boolean</span></span><br><span class="line"><span class="keyword">get</span>() = <span class="keyword">this</span>.size == <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><ul><li>setter (관습적으로 파라미터 이름은 value)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringRepresentation: String    </span><br><span class="line"><span class="keyword">get</span>() = <span class="keyword">this</span>.toString()    </span><br><span class="line"><span class="keyword">set</span>(value) &#123;        </span><br><span class="line">    setDataFromString(value)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><p><br></p><h5 id="타입생략"><a href="#타입생략" class="headerlink" title="타입생략"></a>타입생략</h5><ul><li>코틀린 1.1 부터는 getter를 통해 타입을 추론할 수 있는 경우, 프로퍼티의 타입을 생략할 수 있음.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isEmpty <span class="comment">//: Boolean (생략 가능)    </span></span><br><span class="line"><span class="keyword">get</span>() = <span class="keyword">this</span>.size == <span class="number">0</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h5><ul><li>accessor에 가시성(접근지정자) 변경이 필요하거나, 어노테이션이 필요한 경우 기본 accessor의 수정 없이 body 없는 accessor를 통해 정의 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> setterVisibility: String = <span class="string">"abc"</span>        <span class="keyword">private</span> <span class="keyword">set</span>    <span class="keyword">var</span> setterWithAnnotation: Any? = <span class="literal">null</span>        <span class="meta">@Inject</span> <span class="keyword">set</span> <span class="comment">// annotate the setter with Inject&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Body를 작성해도 됨</li></ul><p><code>var setterVisibility: String = &quot;abc&quot;    private set(value) {        field = value    }</code> </p><p><br></p><p><br></p><h5 id="Backing-Fields-후원필드"><a href="#Backing-Fields-후원필드" class="headerlink" title="Backing Fields (후원필드)"></a>Backing Fields (후원필드)</h5><ul><li>코틀린 클래스는 field를 가질 수 없음 (예약어인가?)</li><li>‘field’ 라는 식별자를 통해 접근할 수 있는 automatic backing field를 제공함</li><li>filde는 프로퍼티의 accessor에서만 사용 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the initializer value is written directly to the backing field</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>    </span><br><span class="line"><span class="keyword">set</span>(value) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) field = value    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>backing fields 생성 조건<ul><li>accessor 중 1개라도 기본 구현을 사용하는 경우 (재정의하지 않는 경우)</li><li>custom accessor에서 field 식별자를 참조하는 경우</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the initializer value is written directly to the backing field</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>    </span><br><span class="line"><span class="keyword">set</span>(value) &#123;        </span><br><span class="line">        <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) field = value    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>아래의 경우는 backing field 를 생성하지 않음<ul><li>val : read-only 라서 setter가 없는데, getter 에서 field를 사용하지 않으므로.</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isEmpty: <span class="built_in">Boolean</span>    </span><br><span class="line"><span class="keyword">get</span>() = <span class="keyword">this</span>.size == <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><p>추가로 테스트해본 것</p><ul><li>isEmpty1 : backing field 사용 X</li><li>isEmpty2 : backing field 사용 O</li></ul></li><li><p>코틀린</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> isEmpty1: <span class="built_in">Boolean</span>    </span><br><span class="line"><span class="keyword">get</span>() = <span class="keyword">this</span>.size == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> isEmpty2: <span class="built_in">Boolean</span> = <span class="literal">true</span>    </span><br><span class="line"><span class="keyword">get</span>() = field</span><br></pre></td></tr></table></figure></li><li><p>디컴파일 후 (자바)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> boolean isEmpty2 = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> boolean isEmpty1() &#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> boolean isEmpty2() &#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.isEmpty2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>중간부분은 생략. 위와 같이, field 를 사용하지 않으면 자바 클래스의 멤버변수로 선언되지 않음. </p></li></ul><p><br></p><p><br></p><h5 id="Backing-Properties"><a href="#Backing-Properties" class="headerlink" title="Backing Properties"></a>Backing Properties</h5><ul><li>“implicit backing field” 방식이 맞지 않는 경우에는 “backing property”를 이용할 수도 있음</li><li>이 부분 확실하게 이해 못함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> table: Map&lt;String, <span class="built_in">Int</span>&gt;? = <span class="literal">null</span> <span class="comment">// backing property</span></span><br><span class="line"><span class="keyword">val</span> table: Map&lt;String, <span class="built_in">Int</span>&gt;    </span><br><span class="line"><span class="keyword">get</span>() &#123;        </span><br><span class="line">        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123;            </span><br><span class="line">            _table = HashMap()        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> _table ?: <span class="keyword">throw</span> AssertionError(<span class="string">"null "</span>)    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Compile-Time-Constants"><a href="#Compile-Time-Constants" class="headerlink" title="Compile-Time Constants"></a>Compile-Time Constants</h5><ul><li>const modifier를 이용하면 컴파일 타임 상수를 만들 수 있음.<ul><li>이런 프로퍼티는 어노테이션에서도 사용 가능</li></ul></li><li>조건 : Top-level(패키지의 최상위), object의 멤버, String 이나 primitive type 으로 초기화된 경우</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> SUBSYSTEM_DEPRECATED: String = <span class="string">"This subsystem is deprecated"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated(SUBSYSTEM_DEPRECATED)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;    &#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Late-Initialized-Properties"><a href="#Late-Initialized-Properties" class="headerlink" title="Late-Initialized Properties"></a>Late-Initialized Properties</h5><ul><li><p>일반적으로 프로퍼티는 non-null 타입으로 선언됨</p></li><li><p>간혹 non-null 타입 프로퍼티를 사용하고 싶지만, 생성자에서 초기화를 해줄 수 없는 경우가 있음</p><ul><li>Dependency injection</li><li>Butter knife</li><li>Unit test의 setup 메서드</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> subject: TestSubject        </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SetUp</span> <span class="function"><span class="keyword">fun</span> <span class="title">setup</span><span class="params">()</span></span> &#123;        </span><br><span class="line">        subject = TestSubject()    </span><br><span class="line">    &#125;        </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;        </span><br><span class="line">        subject.method() <span class="comment">// dereference directly    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><p>객체가 생성자에서는 할당되지 않지만, non-null 타입으로 사용하고 싶은 경우 lateinit modifier를 사용하면 된다.</p></li><li><p>조건</p><ul><li><p>클래스의 바디에서 선언된 프로퍼티만 가능</p></li><li><p>기본생성자에서 선언된 프로퍼티는 안됨 (파라미터에 키워드 선언 불가)</p></li><li><p>var 프로퍼티만 가능</p></li><li><p>custom accessor이 없어야 함</p></li><li><p>non-null 타입이어야 함</p></li><li><p>primitive type은 불가</p></li><li><p>lateinit 프로퍼티가 초기화되기 전 접근할 경우 오류 발생</p><p><strong>kotlin.UninitializedPropertyAccessException: lateinit property tet has not been initialized</strong></p></li></ul></li></ul><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(7)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-7/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-7/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Inheritance"><a href="#새차원의-코틀린-강좌-Inheritance" class="headerlink" title="새차원의 코틀린 강좌 - Inheritance"></a>새차원의 코틀린 강좌 - Inheritance</h2><p><br></p><h5 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h5><ul><li>코틀린의 최상위 클래스는 Any</li><li>클래스에 상위타입을 선언하지 않으면 Any가 상속됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example1</span>         // 암시적인 <span class="title">Any</span> 상속</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example2</span> : <span class="type">Any</span></span>() <span class="comment">// 명시적인 Any 상속</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><p>Any는 java.lang.Object와는 다른 클래스</p></li><li><ul><li>equals(), hashCode(), toString() 만 있음</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kotlin</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(other: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">hashCode</span><span class="params">()</span></span>: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>명시적으로 상위 타입을 선언하려면, 클래스 헤더의 콜론(:) 뒤에 상위타입을 선언하면 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>(p: <span class="built_in">Int</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>(p: <span class="built_in">Int</span>) : Base(p)</span><br></pre></td></tr></table></figure><p><br></p><ul><li>파생클래스에 기본생성자가 있으면, 파생클래스의 기본생성자에서 상위타입의 생성자를 호출하여 초기화할 수 있음</li><li>파생클래스에 기본생성자가 없으면, 각각의 보조생성자에서 상위타입을 super 키워드를 이용해 초기화해주어야 함.</li><li>또는 다른 생성자에게 상위타입을 초기화할 수 있도록 위임해주어야 함.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyView</span> : <span class="type">View &#123;</span></span></span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">super</span>(<span class="number">1</span>) <span class="comment">// View 클래스의 생성자 호출</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ctx: <span class="built_in">Int</span>) : <span class="keyword">this</span>() <span class="comment">// 첫번째 보조생성자 호출 (위임)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(ctx: <span class="built_in">Int</span>, attrs: <span class="built_in">Int</span>) : <span class="keyword">super</span>(ctx, attrs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>open 어노테이션은 Java의 final과 반대임</li><li>open class는 다른 클래스가 상속할 수 있음</li><li>기본적으로 코틀린의 모든 class는 final (상속 불가)</li><li>이유는 : Effecive Java, Item 17 - Design and document for inheritance or else prohibit it.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>(p: <span class="built_in">Int</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>(p: <span class="built_in">Int</span>) : Base(p)</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="메서드-오버라이딩"><a href="#메서드-오버라이딩" class="headerlink" title="메서드 오버라이딩"></a>메서드 오버라이딩</h5><ul><li>오버라이딩 될 메서드 : open 어노테이션이 요구됨</li><li>오버라이딩 된 메서드 : override 어노테이션이 요구됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> : <span class="type">Base</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123; &#125;             <span class="comment">// 불가. override 키워드 필요</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123; &#125;   <span class="comment">// 불가</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="프로퍼티-오버라이딩"><a href="#프로퍼티-오버라이딩" class="headerlink" title="프로퍼티 오버라이딩"></a>프로퍼티 오버라이딩</h5><ul><li>메서드 오버라이딩과 유사한 방식으로 오버라이딩 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> x: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar1</span> : <span class="type">Foo</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> x: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="오버라이딩-규칙"><a href="#오버라이딩-규칙" class="headerlink" title="오버라이딩 규칙"></a>오버라이딩 규칙</h5><ul><li>같은 멤버에 대한 중복된 구현을 상속받은 경우, 상속받은 클래스는 해당 멤버를 오버라이딩하고 자체 구현을 제공해야 함</li><li><strong>super&lt;클래스명&gt;.함수</strong> 를 통해서 상위 클래스를 호출 할 수 있음 (모호성 해결)</li><li>클래스 1개 상속, 인터페이스 1개 구현 (다중상속 X)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span> &#123; print(<span class="string">"a"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">b</span><span class="params">()</span></span> &#123; print(<span class="string">"b"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A</span></span>(), B &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;A&gt;.f()</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.f()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> obj = C()</span><br><span class="line">    obj.f() <span class="comment">// 출력 : AB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h5><ul><li>abstract 멤버는 구현이 없음</li><li>abstract 클래스나 멤버는 open이 필요 없음 (디폴트)</li><li>abstract 클래스는 객체를 생성할 수 없음.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> : <span class="type">AbsClass</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">        print(<span class="string">"my class"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> obj = MyClass()</span><br><span class="line">    obj.f() <span class="comment">// 출력 : my class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(6)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-6/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-6/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Classes"><a href="#새차원의-코틀린-강좌-Classes" class="headerlink" title="새차원의 코틀린 강좌 - Classes"></a>새차원의 코틀린 강좌 - Classes</h2><p><br></p><h5 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h5><ul><li><p>클래스는 class 키워드로 선언</p></li><li><ul><li>클래스 이름</li><li>클래스 헤더 (형식 매개변수, 기본 생성자 등 + 접근 지정자)</li><li>클래스 바디 { }</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoice</span></span>(<span class="keyword">data</span>: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>헤더와 바디는 옵션이고, 바디가 없으면 { } 도 생략 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="기본-생성자"><a href="#기본-생성자" class="headerlink" title="기본 생성자"></a>기본 생성자</h5><ul><li>클래스별로 <strong>1개</strong>만 가질 수 있음</li><li>클래스 헤더의 일부</li><li>클래스 이름 뒤에 작성</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(firstName: String) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>annotation이나 접근지정자가 없을 때는, 기본생성자의 constructor 키워드 생략 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(firstName: String) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li><p>기본생성자는 코드를 가질 수 없음</p></li><li><ul><li>초기화는 초기화 블록(init) 안에서 작성해야함</li><li>초기화 블록은 init 키워드로 작성</li></ul></li><li><p>기본생성자의 파라미터는 init 블록 안에서 사용 가능함</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(name: String) &#123;    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"Customer initialized with value <span class="subst">$&#123;name&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a><br></h5><ul><li>기본 생성자의 파라미터는 프로퍼티 초기화 선언에도 사용 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> customerKey = name.toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>프로퍼티 선언 및 초기화는 기본생성자에서 간결한 구문으로 사용 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> firstName: String, <span class="keyword">val</span> lastName: String) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>프로퍼티란?</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(name: String) &#123;</span><br><span class="line">    <span class="comment">// 프로퍼티 (getter, setter 를 가짐)</span></span><br><span class="line">    <span class="keyword">var</span> fullname: String = <span class="string">""</span></span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">            println(<span class="string">"call getter"</span>)</span><br><span class="line">            <span class="keyword">return</span> field</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            println(<span class="string">"call setter"</span>)</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> obj = Customer(<span class="string">"원딜레이"</span>)</span><br><span class="line">    println(obj.fullname)</span><br><span class="line">    obj.fullname = <span class="string">"홍홍홍"</span></span><br><span class="line">    println(obj.fullname)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p># 출력값</p><p>call getter</p><p>원딜레이</p><p>call setter</p><p>call getter</p><p>홍홍홍</p><p><br></p><ul><li>기본생성자에 어노테이션 또는 접근지정자 등이 있는 경우 constructor 키워드가 필요함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="보조생성자"><a href="#보조생성자" class="headerlink" title="보조생성자"></a>보조생성자</h5><ul><li>클래스별로 여러 개를 가질 수 있음</li><li>constructor 키워드로 바디에 선언 (기본생성자는 헤더에 선언)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(parent: Person) &#123;</span><br><span class="line">        parent.children.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li><p>클래스가 기본생성자를 가지고 있다면, 각각의 보조생성자들은 기본생성자를 직접 or 간접적으로 위임해주어야 함</p></li><li><p>this 키워드 이용</p></li><li><ul><li>직접적 : 기본생성자에 위임</li><li>간접적 : 다른 보조생성자에 위임</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        println(<span class="string">"디폴트 생성자!!!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, parent: Person) : <span class="keyword">this</span>(name) &#123;</span><br><span class="line">        println(<span class="string">"<span class="variable">$name</span> 의 남자친구는 <span class="subst">$&#123;parent.name&#125;</span>"</span>)</span><br><span class="line">        println(<span class="string">"생성자1 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="string">"원지팡"</span>, Person(<span class="string">"홍태준"</span>)) &#123;</span><br><span class="line">        println(<span class="string">"생성자2 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="생성된-generated-기본생성자"><a href="#생성된-generated-기본생성자" class="headerlink" title="생성된(generated) 기본생성자"></a>생성된(generated) 기본생성자</h5><ul><li><p>클래스에 기본생성자 or 보조생성자를 선언하지 않으면, 생성된 기본생성자가 만들어짐</p></li><li><p>generated primary constructor</p></li><li><ul><li>매개변수가 없음</li><li>가시성이 public</li></ul></li><li><p>만약 생성된 기본생성자의 가시성이 public이 아니어야한다면, 다른 가시성을 가진 빈 기본생성자를 선언해야함</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DontCreateMe</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="인스턴스-생성"><a href="#인스턴스-생성" class="headerlink" title="인스턴스 생성"></a>인스턴스 생성</h5><ul><li>코틀린은 new 키워드가 없음</li><li>객체를 생성하려면 생성자를 일반 함수처럼 호출하면 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> invoice = Invoice()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> customer = Customer(<span class="string">"원딜레이"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="클래스-멤버"><a href="#클래스-멤버" class="headerlink" title="클래스 멤버"></a>클래스 멤버</h5><ul><li><p>클래스는 아래의 것들을 포함할 수 있음</p></li><li><ul><li>Constructors and initializer blocks</li><li>Functions</li><li>Properties</li><li>Nested and Inner Classes</li><li>Object Declarations -&gt; 자바와 많이 다름!</li></ul></li></ul><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(5)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-5/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-5/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Packages-Return-and-Jumps"><a href="#새차원의-코틀린-강좌-Packages-Return-and-Jumps" class="headerlink" title="새차원의 코틀린 강좌 - Packages, Return and Jumps"></a>새차원의 코틀린 강좌 - Packages, Return and Jumps</h2><p><br></p><h5 id="패키지"><a href="#패키지" class="headerlink" title="패키지"></a>패키지</h5><ul><li>소스 파일은 패키지 선언으로 시작됨</li><li>모든 컨텐츠(클래스, 함수, …)는 패키지에 포함됨</li><li>패키지를 명세하지 않으면 이름이 없는 기본 패키지에 포함됨 → 디폴트 패키지에 포함되므로, 다른 파일에서도 자동으로 import 되어 사용 가능해짐.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> foo.bar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">baz</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    foo.bar.baz()</span><br><span class="line">    foo.bar.Goo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="기본-패키지"><a href="#기본-패키지" class="headerlink" title="기본 패키지"></a>기본 패키지</h5><ul><li>기본으로 import되는 package</li><li>플랫폼 별로 import 되는 package도 다른 부분이 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kotlin.*</span><br><span class="line">kotlin.<span class="keyword">annotation</span>.*</span><br><span class="line">kotlin.collections.*</span><br><span class="line">kotlin.comparisons.* (since <span class="number">1.1</span>)</span><br><span class="line">kotlin.io.*</span><br><span class="line">kotlin.ranges.*</span><br><span class="line">kotlin.sequences.*</span><br><span class="line">kotlin.text.*</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JVM:</span><br><span class="line">java.lang.*</span><br><span class="line">kotlin.jvm.*</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line">kotlin.js.*</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="imports"><a href="#imports" class="headerlink" title="imports"></a>imports</h5><ul><li>기본으로 포함되는 패키지 외에도, 필요한 package 들을 직접 import 할 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bar 1개만 import</span></span><br><span class="line"><span class="keyword">import</span> foo.Bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'foo' 패키지에 모든 것을 import</span></span><br><span class="line"><span class="keyword">import</span> foo.*</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.Bar</span></span><br><span class="line"><span class="comment">// bar.Bar 이름이 충돌나는 경우 'as' 키워드로 로컬 리네임 가능</span></span><br><span class="line"><span class="keyword">import</span> bar.Bar <span class="keyword">as</span> bBar</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="3가지-Jump-표현식"><a href="#3가지-Jump-표현식" class="headerlink" title="3가지 Jump 표현식"></a>3가지 Jump 표현식</h5><ul><li>return : 함수나 익명 함수에서 반환</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   println(<span class="string">"a: <span class="variable">$a</span>, b: <span class="variable">$b</span>"</span>)</span><br><span class="line">   <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>break : 루프를 종료 시킴</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (x &gt; <span class="number">2</span>) <span class="keyword">break</span></span><br><span class="line">   println(<span class="string">"x: <span class="variable">$x</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>continue : 루프의 다음 단계로 진행</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">continue</span></span><br><span class="line">   println(<span class="string">"x: <span class="variable">$x</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Label로-break-continue"><a href="#Label로-break-continue" class="headerlink" title="Label로 break, continue"></a>Label로 break, continue</h5><ul><li>레이블 표현 : label@, abc@, fooBar@<ul><li>식별자 + @ 형태로 사용</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 바깥 for 문까지 종료시킬 수 있다</span></span><br><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">    println(<span class="string">"--- i: <span class="variable">$i</span> ---"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        println(<span class="string">"j: <span class="variable">$j</span>"</span>)</span><br><span class="line">        <span class="keyword">if</span> (i + j &gt; <span class="number">12</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span><span class="symbol">@loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">loop@</span> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">    println(<span class="string">"--- i: <span class="variable">$i</span> ---"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span><span class="symbol">@loop</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">"j: <span class="variable">$j</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Label로-return"><a href="#Label로-return" class="headerlink" title="Label로 return"></a>Label로 return</h5><ul><li>코틀린에서 중첩될 수 있는 요소들<ul><li>함수 리터럴 (function literals)</li><li>지역함수 (local function)</li><li>객체 표현식 (object expression)</li><li>함수 (functions)</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ints = listOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ints.forEach(<span class="function"><span class="title">fun</span><span class="params">(value: <span class="type">Int</span>)</span></span> &#123; <span class="comment">// 익명함수</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">1</span>) <span class="keyword">return</span>     <span class="comment">// 현재 함수만 종료됨</span></span><br><span class="line">    print(value)</span><br><span class="line">&#125;)</span><br><span class="line">print(<span class="string">"END"</span>)</span><br><span class="line"><span class="comment">// 출력값 : 023END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ints.forEach &#123;                 <span class="comment">// 람다함수</span></span><br><span class="line">    <span class="keyword">if</span> (it == <span class="number">1</span>) <span class="keyword">return</span>        <span class="comment">// 상위 함수까지 모두 종료됨</span></span><br><span class="line">    print(it)</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"END"</span>)</span><br><span class="line"><span class="comment">// 출력값 : 0</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="람다식에서-return-시-주의사항"><a href="#람다식에서-return-시-주의사항" class="headerlink" title="람다식에서 return 시 주의사항"></a>람다식에서 return 시 주의사항</h5><ul><li>람다식에서 return 시 nearest enclosing 함수가 return 됨</li><li>람다식만 return 하려면 label 을 이용해야함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> ints = listOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">ints.forEach &#123;                 <span class="comment">// 람다함수</span></span><br><span class="line">    <span class="keyword">if</span> (it == <span class="number">1</span>) <span class="keyword">return</span>        <span class="comment">// 상위 함수까지 모두 종료됨</span></span><br><span class="line">    print(it)</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"END"</span>)</span><br><span class="line"><span class="comment">// 출력값 : 0</span></span><br><span class="line"></span><br><span class="line">ints.forEach <span class="symbol">label@</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (it == <span class="number">1</span>) <span class="keyword">return</span><span class="symbol">@label</span></span><br><span class="line">    print(it)</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"END"</span>)</span><br><span class="line"><span class="comment">// 출력값 : 023END</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="암시적-레이블"><a href="#암시적-레이블" class="headerlink" title="암시적 레이블"></a>암시적 레이블</h5><ul><li>람다식에서만 return 하는 경우 label 을 이용해서 return 해야 함</li><li>직접 label 을 사용하는 것보다 암시적 레이블이 편리함</li><li>암시적 레이블은 람다가 사용된 함수(ex. forEach)의 이름과 동일</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ints.forEach &#123;</span><br><span class="line">    <span class="keyword">if</span> (it == <span class="number">1</span>) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line">    print(it)</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">"END"</span>)</span><br><span class="line"><span class="comment">// 출력값 : 023END</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="레이블-return-시-값을-반환할-경우"><a href="#레이블-return-시-값을-반환할-경우" class="headerlink" title="레이블 return 시 값을 반환할 경우"></a>레이블 return 시 값을 반환할 경우</h5><ul><li>return@label 1 형태로 사용</li><li>return + @label + 값</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> ints = listOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> result = ints.map &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@map</span> <span class="string">"zero"</span> <span class="comment">// return at named label</span></span><br><span class="line">        <span class="string">"number <span class="variable">$it</span>"</span>            <span class="comment">// expression returned from lambda</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>- 출력 : [zero, number 1, number 2, number 3]</p><p>  -&gt; print(List<string>) 해도 그냥 출력된다. 자바는 Arrays.toString 이런 메서드 사용했어야 됐는데 코틀린 너무 편한것같다.</string></p><p>아래는 IDE 에서 바꿔준 코드. 변수(result)는 return 에서만 사용되므로 inline 으로 만드는게 좋다는 메시지가 나와서 바꿔준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo2</span><span class="params">()</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> ints = listOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> ints.map &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@map</span> <span class="string">"zero"</span> <span class="comment">// return at named label</span></span><br><span class="line">        <span class="string">"number <span class="variable">$it</span>"</span>            <span class="comment">// expression returned from lambda</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(4)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-4/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-4/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Control-flow"><a href="#새차원의-코틀린-강좌-Control-flow" class="headerlink" title="새차원의 코틀린 강좌 - Control flow"></a>새차원의 코틀린 강좌 - Control flow</h2><p><br></p><p>자바와 달리 코틀린은 if, when 문에서 반환값이 있음</p><p><br></p><h5 id="if-else-문"><a href="#if-else-문" class="headerlink" title="if else 문"></a>if else 문</h5><ul><li>Java와 거의 유사함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전통적인 방식</span></span><br><span class="line"><span class="keyword">var</span> max1 = a</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) max1 = b</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max2: <span class="built_in">Int</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    max2 = a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    max2 = b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>if 문이 식으로 사용되는 경우 값을 반환함</li><li>if 식의 경우 반드시 else 를 동반해야 함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p><br></p><ul><li>if 식의 branches 들이 블록을 가질 수 있음 {…}</li><li>블록의 마지막 구문이 반환 값이 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    print(<span class="string">"Choose a"</span>)</span><br><span class="line">    a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    print(<span class="string">"Choose b"</span>)</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>삼항연산자가 없음 - if 문이 삼항연산자 역할을 잘 해내기 때문</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java</span></span><br><span class="line">int max = (a &gt; b) ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kotlin</span></span><br><span class="line"><span class="keyword">val</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p><br></p><ul><li>when문은 C계열 언어의 switch문을 대체</li><li>각각의 branches의 조건문이 만족할 때 까지 위에서부터 순차적으로 인자를 비교</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        print(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>when문이 식으로 사용된 경우에는 조건을 만족하는 branch의 값이 전체 식의 결과 값이 됨</li><li>else 의 경우 다른 branch들의 조건이 만족되지 않을 때 수행됨</li><li>when이 식으로 사용된 경우 else 문이 필수임</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">100</span> -&gt; <span class="string">"A"</span></span><br><span class="line">    <span class="number">90</span> -&gt; <span class="string">"B"</span></span><br><span class="line">    <span class="number">80</span> -&gt; <span class="string">"C"</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">"F"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>컴파일러가 else문이 없어도 된다는 것을 입증할 수 없는 경우에는 else 생략 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="literal">true</span> -&gt; <span class="string">"맞다"</span></span><br><span class="line">    <span class="literal">false</span> -&gt; <span class="string">"틀리다"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>여러 조건들이 같은 방식으로 처리될 수 있는 경우, branch의 조건문에 콤마를 사용하여 표기하면 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span> -&gt; print(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"otherwise"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>branch의 조건문에 함수나 식을 사용할 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    parseInt(x) -&gt; print(<span class="string">"s encodes x"</span>)</span><br><span class="line">    <span class="number">1</span> + <span class="number">3</span> -&gt; print(<span class="string">"4"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"s does not encode x"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>range 나 collection 에  in이나 !in 으로 범위 등을 검사할 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> validNumbers = listOf(<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>)</span><br><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="keyword">in</span> validNumbers -&gt; print(<span class="string">"x is valid"</span>)</span><br><span class="line">    <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">    !<span class="keyword">in</span> <span class="number">10</span>..<span class="number">20</span> -&gt; print(<span class="string">"x is outside the range"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"none of the above"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>is나 !is를 이용하여 타입을 검사할 수 있음. 이 때 <strong>스마트 캐스트</strong>가 적용됨.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">hasPrefix</span><span class="params">(x: <span class="type">Any</span>)</span></span> = <span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; x.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>when은 if-else if 체인을 대체할 수 있음.</li><li>when에 인자를 입력하지 않으면, 논리 연산으로 처리됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="for-loops"><a href="#for-loops" class="headerlink" title="for loops"></a>for loops</h5><ul><li>for 문은 iterator를 제공하는 모든 것을 반복할 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> collection)</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p><br></p><ul><li>for 문의 body가 블록이 올 수도 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> collection) &#123;</span><br><span class="line">    print(item.id)</span><br><span class="line">    print(item.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>for 문을 지원하는 iterator의 조건 : 멤버함수나 확장함수 중에서<ul><li>iterator()를 반환하는 것이 있는 경우</li><li>next()를 가지는 경우</li><li>hasNext(): Boolean을 가지는 경우</li></ul></li><li>위의 세 함수들은 operator로 표기 되어야 함.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span>.size &gt; idx</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">next</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span>[idx++]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: MyIterator &#123;</span><br><span class="line">        <span class="keyword">return</span> MyIterator()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> myData = MyData()</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> myData) &#123;</span><br><span class="line">    print(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>+ 상속 관계와 같은 객체지향 기법 없이 간단히 구현 가능.</p><p><br></p><ul><li>배열이나 리스트를 반복할 때, index를 이용하고 싶다면 indices를 이용하면 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="string">"가"</span>,<span class="string">"나"</span>,<span class="string">"다"</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices) &#123;</span><br><span class="line">    println(<span class="string">"<span class="variable">$i</span>: <span class="subst">$&#123;array[i]&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>index를 이용하고 싶을 때,  withIndex()를 이용할 수도 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array = arrayOf(<span class="string">"가"</span>,<span class="string">"나"</span>,<span class="string">"다"</span>)</span><br><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"<span class="variable">$index</span>: <span class="subst">$&#123;value&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="while-loops"><a href="#while-loops" class="headerlink" title="while loops"></a>while loops</h5><ul><li>while, do-while문은 java와 거의 같음</li><li>do-while 문에서 body의 지역변수를 do-while 문의 조건문이 참조할 수 있음</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> y = retrieveData()</span><br><span class="line">&#125; <span class="keyword">while</span> (y != <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(3)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-3/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-3/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Basic-Type"><a href="#새차원의-코틀린-강좌-Basic-Type" class="headerlink" title="새차원의 코틀린 강좌 - Basic Type"></a>새차원의 코틀린 강좌 - Basic Type</h2><p><br></p><h5 id="기본-타입"><a href="#기본-타입" class="headerlink" title="기본 타입"></a>기본 타입</h5><ul><li>코틀린에서 <strong>모든 것은 객체</strong>임 (자바의 경우는 primitive type과 구분)</li><li>모든 것에 멤버함수나 프로퍼티를 호출 가능하다는 의미에서…</li></ul><p><br></p><p><br></p><h5 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h5><ul><li>자바의 숫자형과 거의 비슷하게 처리</li><li>코틀린에서 Number는 클래스임, java의 privitive type에 직접 접근할 수 없음</li><li>자바에서 숫자형이던 char가 코틀린에서는 숫자 형이 아님</li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://t1.daumcdn.net/cfile/tistory/99ADD33F5BC178E025" alt="img"></h5><p><br></p><p><br></p><h5 id="리터럴-Literal"><a href="#리터럴-Literal" class="headerlink" title="리터럴(Literal)"></a>리터럴(Literal)</h5><ul><li>10진수 : 123 (Int, Short)</li><li>Long : 123L</li><li>Double : 123.5, 123.5e10</li><li>Float : 123.5f</li><li>2진수 : 0b00001011</li><li>8진수 : 미지원 (Java는 지원 : int i = 017;)</li><li>16진수 : 0X0F</li></ul><p><br></p><p><br></p><h5 id="Underscores-in-numeric-literals-since-1-1"><a href="#Underscores-in-numeric-literals-since-1-1" class="headerlink" title="Underscores in numeric literals (since 1.1)"></a>Underscores in numeric literals (since 1.1)</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> oneMillion = <span class="number">1_000_000</span></span><br><span class="line"><span class="keyword">val</span> creditCardNumber = <span class="number">1234_5678_9012_3456L</span></span><br><span class="line"><span class="keyword">val</span> socialSecurityNumber = <span class="number">999_99_9999L</span></span><br><span class="line"><span class="keyword">val</span> hexBytes = <span class="number">0xFF_EC_DE_5E</span></span><br><span class="line"><span class="keyword">val</span> bytes = <span class="number">0b11010010_01101001_10010100_10010010</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h5><ul><li>자바 플랫폼에서 숫자형은 JVM primitive type으로 저장됨</li><li>Nullable이나 제네릭의 경우에는 박싱(Integer 클래스로 변환)됨</li><li>박싱된 경우 identitiy를 유지 하지 않음</li><li>코틀린 코드를 바이트 코드로 변환한 후 디컴파일하면 자바 코드를 확인할 수 있다.</li><li>=== 연산 : 같은 객체인가 판별 (instanceof 메서드인가?)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">10000</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Int</span> = <span class="number">10000</span></span><br><span class="line">println(<span class="string">"a === b <span class="subst">$&#123;a === b&#125;</span>"</span>) <span class="comment">// true</span></span><br><span class="line">println(<span class="string">"a == b <span class="subst">$&#123;a == b&#125;</span>"</span>)   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>? = <span class="number">10000</span></span><br><span class="line"><span class="keyword">val</span> d: <span class="built_in">Int</span> = <span class="number">10000</span></span><br><span class="line">println(<span class="string">"c === d <span class="subst">$&#123;c === d&#125;</span>"</span>) <span class="comment">// false</span></span><br><span class="line">println(<span class="string">"c == d <span class="subst">$&#123;c == d&#125;</span>"</span>)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="Explicit-Conversions"><a href="#Explicit-Conversions" class="headerlink" title="Explicit Conversions"></a>Explicit Conversions</h5><ul><li>작은 타입은 큰 타입의 하위 타입이 아님, 즉 작은 타입에서 큰 타입으로의 대입이 안됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>      <span class="comment">// A boxed Int</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Long</span> = a     <span class="comment">// 오류</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Long</span> = a.toLong()</span><br><span class="line">println(a == b)     <span class="comment">// 오류</span></span><br></pre></td></tr></table></figure><ul><li>명시적으로 변환을 해 주어야 함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> i: <span class="built_in">Int</span> = b.toInt() <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>+ 직접 테스트해본 결과 작은 변수를 큰 변수로 캐스팅하려고 하면 오버플로우가 발생한다.</p><p><br></p><p><br></p><h5 id="문자-Characters"><a href="#문자-Characters" class="headerlink" title="문자 (Characters)"></a>문자 (Characters)</h5><ul><li>Char는 숫자로 취급 되지 않음</li><li>자바는 아스키코드 값(unsigned int)으로 처리 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">check1</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123; &#125; <span class="comment">// error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">check2</span><span class="params">(c: <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">'a'</span>) &#123; &#125; <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    print(<span class="string">'0'</span>.toInt()) <span class="comment">// print 48</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h5><ul><li>배열은 Array 클래스로 표현됨</li><li>get, set ([] 연산자 오버로딩 가능)</li><li>size 등 유용한 멤버 함수 포함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array: Array&lt;String&gt; = arrayOf(<span class="string">"코틀린"</span>, <span class="string">"강좌"</span>)</span><br><span class="line">println(array.<span class="keyword">get</span>(<span class="number">0</span>))</span><br><span class="line">println(array[<span class="number">1</span>])</span><br><span class="line">println(array.size)</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="배열-생성"><a href="#배열-생성" class="headerlink" title="배열 생성"></a>배열 생성</h5><ol><li>Array의 팩토리 함수 이용</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = Array(<span class="number">5</span>, &#123; i -&gt; i.toString() &#125;) <span class="comment">// i : 0 ~ 4</span></span><br></pre></td></tr></table></figure><ol start="2"><li>arrayOf() 등의 라이브러리 함수 이용</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b = arrayOf(<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="특별한-Array-클래스"><a href="#특별한-Array-클래스" class="headerlink" title="특별한 Array 클래스"></a>특별한 Array 클래스</h5><ul><li>Primitive 타입의 박싱 오버헤드(제너릭이나 레퍼런스 타입으로 변환되는 것)를 없애기 위한 배열</li><li>IntArray, ShortArray, LongArray, CharArray</li><li>Array를 상속한 클래스들은 아니지만, Array와 같은 메소드와 프로퍼티를 가짐</li><li>size 등 유용한 멤버 함수 포함</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">6</span></span><br><span class="line">println(x.<span class="keyword">get</span>(<span class="number">0</span>))</span><br><span class="line">println(x[<span class="number">0</span>])</span><br><span class="line">println(x.size)</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h5><ul><li>문자열은 String 클래스로 표현</li><li>String은 characters로 구성됨</li><li>s[i] 와 같은 방식으로 접근 가능 (immutable 이므로 변경 불가)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x: String = <span class="string">"Kotlin"</span></span><br><span class="line">println(x.<span class="keyword">get</span>(<span class="number">0</span>))</span><br><span class="line">println(x[<span class="number">0</span>])</span><br><span class="line">println(x.length)</span><br><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> x) &#123; println(c) &#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="문자열-리터럴"><a href="#문자열-리터럴" class="headerlink" title="문자열 리터럴"></a>문자열 리터럴</h5><ul><li>escaped string (“Kotlin”)<ul><li>전통적인 방식으로 Java String과 거의 비슷</li><li>Backslash를 사용하여 escaping 처리</li></ul></li><li>raw string (“””Kotlin”””)<ul><li>escaping 처리 필요 없음</li><li>개행 이나 어떠한 문자 포함 가능</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s1 = <span class="string">"Hello, world!\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> s2 = <span class="string">"""</span></span><br><span class="line"><span class="string">"'이것은 코틀린의</span></span><br><span class="line"><span class="string">raw String</span></span><br><span class="line"><span class="string">입니다.'"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure><p>“”” “”” 사이에 탭도 인식됨. 그래서 에디터 제일 왼쪽에 붙여야 원하는대로 나옴 (기존에 \사용했던 모든 것들 그냥 그대로 쓸 수 있다는 것!)</p><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(2)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-2/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-2/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Basic-Syntax"><a href="#새차원의-코틀린-강좌-Basic-Syntax" class="headerlink" title="새차원의 코틀린 강좌 - Basic Syntax"></a>새차원의 코틀린 강좌 - Basic Syntax</h2><p><br></p><h5 id="패키지-정의"><a href="#패키지-정의" class="headerlink" title="패키지 정의"></a>패키지 정의</h5><ul><li>패키지 정의는 파일 최상단에 위치</li><li>디렉터리와 패키지를 일치시키지 않아도 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.demo</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="함수-정의"><a href="#함수-정의" class="headerlink" title="함수 정의"></a>함수 정의</h5><ul><li>함수는 fun 키워드로 정의</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>함수 몸체가 식(Expression)인 경우 return 생략 가능</li><li>이런 경우 return type이 추론됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure><ul><li>리턴 할 값이 없는 경우 Unit(Object)으로 리턴 함</li><li>Unit는 Java에서 void 리턴 역할</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printKotlin</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">   println(<span class="string">"hello Kotlin"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Unit는 생략 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printKotlin</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">"hello Kotlin"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="지역-변수-정의"><a href="#지역-변수-정의" class="headerlink" title="지역 변수 정의"></a>지역 변수 정의</h5><ul><li>val : 읽기 전용 변수</li><li>값의 할당은 1회만 가능, Java의 final과 유사</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span><span class="comment">// 즉시 할당</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">2</span><span class="comment">// Int 타입 추론</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span><span class="comment">// 컴파일 오류, 초기화 필요</span></span><br><span class="line">c = <span class="number">3</span><span class="comment">// 컴파일 오류, 읽기 전용</span></span><br></pre></td></tr></table></figure><ul><li>var: Mutable 변수</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">x += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="문자열-템플릿"><a href="#문자열-템플릿" class="headerlink" title="문자열 템플릿"></a>문자열 템플릿</h5><ul><li>String Interpolation (문자열 보간법)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// simple name in template:</span></span><br><span class="line"><span class="keyword">val</span> s1 = <span class="string">"a is <span class="variable">$a</span>"</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="comment">// arbitrary expression in template:</span></span><br><span class="line"><span class="keyword">val</span> s2 = <span class="string">"<span class="subst">$&#123;s1.replace("is","was")&#125;</span>, but now is <span class="variable">$a</span>"</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">       <span class="keyword">return</span> a</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>조건식으로 사용가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="nullable"><a href="#nullable" class="headerlink" title="nullable"></a>nullable</h5><ul><li>값이 null 일 수 있는 경우 타입에 nullable 마크를 명시 해야함.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">   <span class="comment">// 정수가 아닌 경우 null을 리턴</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nullable 타입의 변수를 접근 할 때는 반드시 null 체크를 해야 함</li><li>그렇지 않으면 컴파일 오류 발생</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printProduct</span><span class="params">(arg1: <span class="type">String</span>, arg2: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> x: <span class="built_in">Int</span>? = parseInt(arg1)</span><br><span class="line">   <span class="keyword">val</span> y: <span class="built_in">Int</span>? = parseInt(arg2)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</span><br><span class="line">       println(x * y)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       println(<span class="string">"either '<span class="variable">$arg1</span>' or '<span class="variable">$arg2</span>' is not a number"</span> )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="자동-타입-변환"><a href="#자동-타입-변환" class="headerlink" title="자동 타입 변환"></a>자동 타입 변환</h5><ul><li>타입 체크만 해도 자동으로 타입 변환이 됨</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">   <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">       <span class="comment">// 'obj' 가 자동으로 String 타입으로 변환 됨</span></span><br><span class="line">       <span class="keyword">return</span> obj.length</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (index &lt; items.size) &#123;</span><br><span class="line">   println(<span class="string">"item at <span class="variable">$index</span> is <span class="subst">$&#123;items[index]&#125;</span>"</span>)</span><br><span class="line">   index++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="when-expression"><a href="#when-expression" class="headerlink" title="when expression"></a>when expression</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dexcribe</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: String =</span><br><span class="line">   <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">       <span class="number">1</span> -&gt; <span class="string">"One"</span></span><br><span class="line">       <span class="string">"Hello"</span> -&gt; <span class="string">"Greeting"</span></span><br><span class="line">       <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="string">"Long"</span></span><br><span class="line">       !<span class="keyword">is</span> String -&gt; <span class="string">"Not a string"</span></span><br><span class="line">       <span class="keyword">else</span> -&gt; <span class="string">"Unknown"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="ranges"><a href="#ranges" class="headerlink" title="ranges"></a>ranges</h5><ul><li>in 연산자를 이용해서 숫자 범위를 체크 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123; <span class="comment">// 1~10 사이에 있는 숫자인지 확인</span></span><br><span class="line">   println(<span class="string">"fits in range"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>range를 이용한 for loop</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span>) &#123; <span class="comment">// 1~5 까지 (5 포함)</span></span><br><span class="line">   print(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h5 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h5><ul><li>컬렉션도 in으로 loop 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> items = listOf&#123;<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">   println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>in 으로 해당 값이 collection에 포함되는지 체크 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> items = setOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">   <span class="string">"orange"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"juicy"</span>)</span><br><span class="line">   <span class="string">"pear"</span> !<span class="keyword">in</span> items -&gt; println(<span class="string">"pear is not exist."</span>) <span class="comment">// 여기서 break 되고 아래는 실행 안됨</span></span><br><span class="line">   <span class="string">"apple"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"apple is fine too"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>람다식을 이용해서 컬렉션에 filter, map 등의 연산 가능</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fruits = listOf(<span class="string">"banana"</span>, <span class="string">"avocado"</span>, <span class="string">"apple"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line">   fruits.filter &#123; it.startsWith(<span class="string">"a"</span>)&#125;</span><br><span class="line">        .sortedBy &#123; it &#125;</span><br><span class="line">        .map &#123; it.toUpperCase() &#125;</span><br><span class="line">        .forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Kotlin] 새차원의 코틀린 강좌(1)</title>
      <link href="/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-1/"/>
      <url>/2018/10/26/Kotlin-%EC%83%88%EC%B0%A8%EC%9B%90%EC%9D%98-%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-1/</url>
      
        <content type="html"><![CDATA[<h2 id="새차원의-코틀린-강좌-Why-Kotlin"><a href="#새차원의-코틀린-강좌-Why-Kotlin" class="headerlink" title="새차원의 코틀린 강좌 - Why Kotlin"></a>새차원의 코틀린 강좌 - Why Kotlin</h2><p><br></p><h5 id="멀티-플랫폼에서-개발할-수-있다"><a href="#멀티-플랫폼에서-개발할-수-있다" class="headerlink" title="멀티 플랫폼에서 개발할 수 있다."></a>멀티 플랫폼에서 개발할 수 있다.</h5><p>JVM, Android, JS(웹브라우저), Native(서버 곧 지원)</p><p><br></p><h5 id="Why-kotlin"><a href="#Why-kotlin" class="headerlink" title="Why kotlin"></a>Why kotlin</h5><ul><li><p><strong>Concise</strong> 코틀린은 문법 자체가 간결하다. 코드 길이가 짧은 건 무조건 좋다 나쁘다라고 단정할 수는 없는 부분이지만, 코드가 간결해지면 유지보수를 조금 더 편하게 할 수 있다. 또한 자바는 보통 정해진 원칙을 엄격하게 따르면서 쓰는데, 코틀린은 좀 더 다양하게 표현을 확장할 수 있다. Rx 같은 함수 프로그래밍을 할 때면 복잡한 람다식을 사용하는 경우가 많은데, 코틀린을 활용하면 람다식을 보다 간편하게 활용할 수 있다. 김상우 개발자는 “코틀린으로 작성해 기존 자바 코드보다 절반에서 최대 4분의 1로 코드를 줄인 적도 있다”라고 설명했다.</p></li><li><p><strong>Safe</strong> 언어 레벨에서 NPE를 안전하게 처리할 수 있다. null 자체가 허용되지 않아 새로운 타입 ?(Nullable)을 제공한다.</p><p>또한 auto-cast를 이용해 캐스팅 오류도 줄여준다.</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calculateTotal</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (obj <span class="keyword">is</span> Invoice) obj.calculateTotal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Interoperable</strong> 자바와 100% 함께 운용 가능하다. (예전에 배울땐 99%였는데, 병렬 처리 쪽이었던걸로 기억한다.) 프로젝트 내에 코틀린 파일과 자바파일이 함께 있어도 문제 없이 동작한다.</li><li><p><strong>Tool-friendly</strong> 안드로이드 스튜디오와 친숙하다(?)</p></li><li><p><strong>GDE들의 코틀린에 대한 답변</strong></p><ul><li>코틀린을 사용함으로써 내 코드는 간단하고 더 좋아졌다.</li><li>코틀린은 가끔씩 내가 10명의 개발자인 것 같이 느끼게 해준다.</li><li>코틀린은 정체된 안드로이드 세상을 위한 진정한 게임 체인저이다.</li><li>자바/안드로이드 개발자들에겐 러닝 커브가 상당히 낮다.</li><li>당신이 코틀린으로 프로그래밍 하기 시작했다면 더 이상 자바를 쓰기 싫어질 것이다. (이거 레알!)</li><li>코틀린은 성능이나 안정성의 희생 없이도 자바보다 좀 더 간결하고 이해하기 쉬운 코드를 만들도록 해준다.</li><li>코틀린은 생산성을 높여주고 당신을 중장기적으로 좀 더 나은 개발자로 만들어 줄 것이다.</li></ul></li></ul><p><br></p><h5 id="코틀린-사용하기"><a href="#코틀린-사용하기" class="headerlink" title="코틀린 사용하기"></a>코틀린 사용하기</h5><p><a href="https://kotlinlang.org/docs/reference/basic-syntax.html" target="_blank" rel="noopener">코틀린 공식 홈페이지</a> 에서 가볍게 돌려봐도 되고, jdk 1.8 설치 후 InteliJ Community 버전으로 설치하면 된다. 안드로이드 스튜디오의 경우에는 3 이상 버전부터 코틀린이 기본적으로 탑재되어있고, 이전 버전은 코틀린 플러그인을 설치하기만 하면 된다.</p><p><br></p><p>출처 : 새차원의 코틀린 강좌 <a href="https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B0%95%EC%A2%8C-%EC%83%88%EC%B0%A8%EC%9B%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
          <category> 강의정리노트 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/26/hello-world/"/>
      <url>/2018/10/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
